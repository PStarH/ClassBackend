# Generated by Django 4.2.13 on 2025-07-04 08:30

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("courses", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("learning_plans", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="TeacherNotes",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("progress", "学习进度观察"),
                            ("behavior", "学习行为观察"),
                            ("difficulty", "困难点分析"),
                            ("strength", "优势发现"),
                            ("recommendation", "改进建议"),
                            ("milestone", "重要里程碑"),
                        ],
                        default="progress",
                        max_length=20,
                        verbose_name="笔记类型",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "低"),
                            ("medium", "中"),
                            ("high", "高"),
                            ("urgent", "紧急"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="优先级",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="标题")),
                ("content", models.TextField(verbose_name="笔记内容")),
                (
                    "observations",
                    models.JSONField(
                        default=dict,
                        help_text="结构化的观察数据，如学习时长、错误模式等",
                        verbose_name="具体观察数据",
                    ),
                ),
                (
                    "action_items",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        blank=True,
                        default=list,
                        help_text="基于观察得出的具体行动建议",
                        size=None,
                        verbose_name="行动项",
                    ),
                ),
                (
                    "follow_up_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="跟进日期"
                    ),
                ),
                (
                    "is_shared_with_student",
                    models.BooleanField(default=False, verbose_name="是否与学生分享"),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="标签",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "course_progress",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_notes",
                        to="courses.courseprogress",
                        verbose_name="相关课程进度",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_notes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="学生",
                    ),
                ),
            ],
            options={
                "verbose_name": "教师笔记",
                "verbose_name_plural": "教师笔记",
                "db_table": "teacher_notes",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "created_at"],
                        name="teacher_not_user_id_c716e4_idx",
                    ),
                    models.Index(
                        fields=["note_type", "priority"],
                        name="teacher_not_note_ty_9d67a2_idx",
                    ),
                    models.Index(
                        fields=["follow_up_date"], name="teacher_not_follow__d99c72_idx"
                    ),
                    models.Index(
                        fields=["course_progress", "created_at"],
                        name="teacher_not_course__842107_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StudentQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.TextField(verbose_name="问题内容")),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("concept", "概念理解"),
                            ("application", "应用实践"),
                            ("theory", "理论深入"),
                            ("technical", "技术细节"),
                            ("general", "一般问题"),
                        ],
                        default="general",
                        max_length=20,
                        verbose_name="问题类型",
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("basic", "基础"),
                            ("intermediate", "中级"),
                            ("advanced", "高级"),
                        ],
                        default="basic",
                        max_length=20,
                        verbose_name="问题难度",
                    ),
                ),
                (
                    "context",
                    models.TextField(
                        blank=True,
                        help_text="问题出现时的学习情境和背景",
                        verbose_name="问题上下文",
                    ),
                ),
                ("ai_response", models.TextField(blank=True, verbose_name="AI回答")),
                (
                    "is_resolved",
                    models.BooleanField(default=False, verbose_name="是否已解决"),
                ),
                (
                    "teacher_notes",
                    models.TextField(blank=True, verbose_name="教师备注"),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        help_text="用于分类和检索的标签",
                        size=None,
                        verbose_name="标签",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "course_progress",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_questions",
                        to="courses.courseprogress",
                        verbose_name="相关课程进度",
                    ),
                ),
                (
                    "study_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="learning_plans.studysession",
                        verbose_name="相关学习会话",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="学生",
                    ),
                ),
            ],
            options={
                "verbose_name": "学生问题",
                "verbose_name_plural": "学生问题",
                "db_table": "student_questions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "created_at"],
                        name="student_que_user_id_f00d3d_idx",
                    ),
                    models.Index(
                        fields=["question_type", "difficulty_level"],
                        name="student_que_questio_42901a_idx",
                    ),
                    models.Index(
                        fields=["is_resolved"], name="student_que_is_reso_001e5a_idx"
                    ),
                    models.Index(
                        fields=["course_progress", "created_at"],
                        name="student_que_course__babb99_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StudentLearningPattern",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "strengths",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("visual", "视觉学习"),
                                ("auditory", "听觉学习"),
                                ("kinesthetic", "动手学习"),
                                ("reading", "阅读学习"),
                                ("logical", "逻辑思维"),
                                ("creative", "创意思维"),
                            ],
                            max_length=20,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="学习优势",
                    ),
                ),
                (
                    "weaknesses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("attention", "注意力不集中"),
                                ("comprehension", "理解困难"),
                                ("memory", "记忆问题"),
                                ("application", "应用困难"),
                                ("speed", "学习速度慢"),
                                ("motivation", "学习动机不足"),
                            ],
                            max_length=20,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="学习弱项",
                    ),
                ),
                (
                    "frequent_question_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=20),
                        blank=True,
                        default=list,
                        help_text="基于历史问题分析得出的常见问题类型",
                        size=None,
                        verbose_name="常见问题类型",
                    ),
                ),
                (
                    "preferred_learning_time",
                    models.JSONField(
                        default=dict,
                        help_text="基于学习会话分析得出的最佳学习时间段",
                        verbose_name="偏好学习时间",
                    ),
                ),
                (
                    "attention_span_minutes",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="基于学习会话效果分析得出的平均注意力持续时间",
                        verbose_name="注意力持续时间(分钟)",
                    ),
                ),
                (
                    "difficulty_progression_rate",
                    models.FloatField(
                        default=1.0,
                        help_text="学生适应难度提升的速度，1.0为标准速度",
                        verbose_name="难度提升率",
                    ),
                ),
                (
                    "concept_mastery_patterns",
                    models.JSONField(
                        default=dict,
                        help_text="不同类型概念的掌握速度和模式",
                        verbose_name="概念掌握模式",
                    ),
                ),
                (
                    "last_analyzed",
                    models.DateTimeField(auto_now=True, verbose_name="最后分析时间"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_pattern",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="学生",
                    ),
                ),
            ],
            options={
                "verbose_name": "学生学习模式",
                "verbose_name_plural": "学生学习模式",
                "db_table": "student_learning_patterns",
                "indexes": [
                    models.Index(
                        fields=["last_analyzed"], name="student_lea_last_an_e3ef22_idx"
                    )
                ],
            },
        ),
    ]
