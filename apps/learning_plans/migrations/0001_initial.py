# Generated by Django 4.2.13 on 2025-07-29 03:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("courses", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StudySession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="唯一标识符",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="更新时间"),
                ),
                ("start_time", models.DateTimeField(verbose_name="开始时间")),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="结束时间"
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="学习时长(分钟)"
                    ),
                ),
                (
                    "content_covered",
                    models.TextField(blank=True, verbose_name="学习内容"),
                ),
                (
                    "effectiveness_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "很差"),
                            (2, "较差"),
                            (3, "一般"),
                            (4, "良好"),
                            (5, "优秀"),
                        ],
                        null=True,
                        verbose_name="学习效果评分(1-5)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="当前是否在进行中"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="学习笔记")),
                (
                    "subject_category",
                    models.CharField(
                        blank=True,
                        help_text="学习内容的主题分类",
                        max_length=50,
                        verbose_name="学习主题",
                    ),
                ),
                (
                    "goal_id",
                    models.UUIDField(blank=True, null=True, verbose_name="学习目标ID"),
                ),
                (
                    "learning_plan_id",
                    models.UUIDField(blank=True, null=True, verbose_name="学习计划ID"),
                ),
                (
                    "break_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="学习过程中的休息次数",
                        verbose_name="休息次数",
                    ),
                ),
                (
                    "focus_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="学习专注度评分(0-1)",
                        max_digits=3,
                        null=True,
                        verbose_name="专注度评分",
                    ),
                ),
                (
                    "learning_environment",
                    models.CharField(
                        choices=[
                            ("home", "家中"),
                            ("library", "图书馆"),
                            ("cafe", "咖啡厅"),
                            ("classroom", "教室"),
                            ("online", "在线"),
                            ("other", "其他"),
                        ],
                        default="other",
                        max_length=50,
                        verbose_name="学习环境",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("mobile", "手机"),
                            ("tablet", "平板"),
                            ("laptop", "笔记本"),
                            ("desktop", "台式机"),
                            ("other", "其他"),
                        ],
                        default="other",
                        max_length=20,
                        verbose_name="学习设备",
                    ),
                ),
                (
                    "course_progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="学习会话关联的课程进度记录",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="study_sessions",
                        to="courses.courseprogress",
                        verbose_name="关联课程进度",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="学习会话所属用户",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="study_sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "学习会话",
                "verbose_name_plural": "学习会话",
                "db_table": "study_sessions",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="StudentQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question_text", models.TextField(verbose_name="问题内容")),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("concept", "概念理解"),
                            ("application", "应用实践"),
                            ("theory", "理论深入"),
                            ("technical", "技术细节"),
                            ("general", "一般问题"),
                        ],
                        default="general",
                        max_length=20,
                        verbose_name="问题类型",
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("basic", "基础"),
                            ("intermediate", "中级"),
                            ("advanced", "高级"),
                        ],
                        default="basic",
                        max_length=20,
                        verbose_name="问题难度",
                    ),
                ),
                (
                    "context",
                    models.TextField(
                        blank=True,
                        help_text="问题出现时的学习情境和背景",
                        verbose_name="问题上下文",
                    ),
                ),
                ("ai_response", models.TextField(blank=True, verbose_name="AI回答")),
                (
                    "is_resolved",
                    models.BooleanField(default=False, verbose_name="是否已解决"),
                ),
                (
                    "teacher_notes",
                    models.TextField(blank=True, verbose_name="教师备注"),
                ),
                (
                    "tags",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="用于分类和检索的标签，JSON格式存储",
                        verbose_name="标签",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "course_progress",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_questions",
                        to="courses.courseprogress",
                        verbose_name="相关课程进度",
                    ),
                ),
                (
                    "study_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="learning_plans.studysession",
                        verbose_name="相关学习会话",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="学生",
                    ),
                ),
            ],
            options={
                "verbose_name": "学生问题",
                "verbose_name_plural": "学生问题",
                "db_table": "student_questions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentLearningPattern",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "strengths",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="学习优势，JSON格式存储",
                        verbose_name="学习优势",
                    ),
                ),
                (
                    "weaknesses",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="学习弱项，JSON格式存储",
                        verbose_name="学习弱项",
                    ),
                ),
                (
                    "frequent_question_types",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="基于历史问题分析得出的常见问题类型，JSON格式存储",
                        verbose_name="常见问题类型",
                    ),
                ),
                (
                    "preferred_learning_time",
                    models.JSONField(
                        default=dict,
                        help_text="基于学习会话分析得出的最佳学习时间段",
                        verbose_name="偏好学习时间",
                    ),
                ),
                (
                    "attention_span_minutes",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="基于学习会话效果分析得出的平均注意力持续时间",
                        verbose_name="注意力持续时间(分钟)",
                    ),
                ),
                (
                    "difficulty_progression_rate",
                    models.FloatField(
                        default=1.0,
                        help_text="学生适应难度提升的速度，1.0为标准速度",
                        verbose_name="难度提升率",
                    ),
                ),
                (
                    "concept_mastery_patterns",
                    models.JSONField(
                        default=dict,
                        help_text="不同类型概念的掌握速度和模式",
                        verbose_name="概念掌握模式",
                    ),
                ),
                (
                    "last_analyzed",
                    models.DateTimeField(auto_now=True, verbose_name="最后分析时间"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_pattern",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="学生",
                    ),
                ),
            ],
            options={
                "verbose_name": "学生学习模式",
                "verbose_name_plural": "学生学习模式",
                "db_table": "student_learning_patterns",
            },
        ),
        migrations.CreateModel(
            name="TeacherNotes",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("progress", "学习进度观察"),
                            ("behavior", "学习行为观察"),
                            ("difficulty", "困难点分析"),
                            ("strength", "优势发现"),
                            ("recommendation", "改进建议"),
                            ("milestone", "重要里程碑"),
                        ],
                        default="progress",
                        max_length=20,
                        verbose_name="笔记类型",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "低"),
                            ("medium", "中"),
                            ("high", "高"),
                            ("urgent", "紧急"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="优先级",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="标题")),
                ("content", models.TextField(verbose_name="笔记内容")),
                (
                    "observations",
                    models.JSONField(
                        default=dict,
                        help_text="结构化的观察数据，如学习时长、错误模式等",
                        verbose_name="具体观察数据",
                    ),
                ),
                (
                    "action_items",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="基于观察得出的具体行动建议，JSON格式存储",
                        verbose_name="行动项",
                    ),
                ),
                (
                    "follow_up_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="跟进日期"
                    ),
                ),
                (
                    "is_shared_with_student",
                    models.BooleanField(default=False, verbose_name="是否与学生分享"),
                ),
                (
                    "tags",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="标签，JSON格式存储",
                        verbose_name="标签",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "course_progress",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_notes",
                        to="courses.courseprogress",
                        verbose_name="相关课程进度",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_notes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="学生",
                    ),
                ),
            ],
            options={
                "verbose_name": "教师笔记",
                "verbose_name_plural": "教师笔记",
                "db_table": "teacher_notes",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "created_at"],
                        name="teacher_not_user_id_c716e4_idx",
                    ),
                    models.Index(
                        fields=["note_type", "priority"],
                        name="teacher_not_note_ty_9d67a2_idx",
                    ),
                    models.Index(
                        fields=["follow_up_date"], name="teacher_not_follow__d99c72_idx"
                    ),
                    models.Index(
                        fields=["course_progress", "created_at"],
                        name="teacher_not_course__842107_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "start_time"], name="study_sessi_user_id_1acbae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "is_active"], name="study_sessi_user_id_1378c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["is_active", "start_time"],
                name="study_sessi_is_acti_5f0211_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["goal_id", "start_time"], name="study_sessi_goal_id_5b3287_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["learning_plan_id", "start_time"],
                name="study_sessi_learnin_0fe729_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["start_time"], name="study_sessi_start_t_e6707c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "subject_category", "start_time"],
                name="study_sessi_user_id_bd2ea9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["course_progress", "start_time"],
                name="study_sessi_course__b11abf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["effectiveness_rating", "start_time"],
                name="study_sessi_effecti_04cf61_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["learning_environment"], name="study_sessi_learnin_485c6e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "end_time"], name="study_sessi_user_id_d0c388_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "start_time", "end_time"], name="ss_user_time_range_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "effectiveness_rating", "duration_minutes"],
                name="ss_user_performance_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["learning_environment", "effectiveness_rating"],
                name="ss_env_performance_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["subject_category", "start_time"], name="ss_subject_time_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "is_active", "start_time"],
                name="ss_user_active_time_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["user", "created_at"], name="ss_user_created_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                fields=["effectiveness_rating", "duration_minutes"],
                name="ss_rating_duration_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(
                condition=models.Q(("is_active", True)),
                fields=["user", "start_time"],
                name="ss_active_user_time_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studysession",
            index=models.Index(fields=["start_time"], name="ss_start_time_date_idx"),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("end_time__isnull", True),
                    ("end_time__gt", models.F("start_time")),
                    _connector="OR",
                ),
                name="study_sessions_end_time_after_start",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("effectiveness_rating__isnull", True),
                    models.Q(
                        ("effectiveness_rating__gte", 1),
                        ("effectiveness_rating__lte", 5),
                    ),
                    _connector="OR",
                ),
                name="study_sessions_effectiveness_rating_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("duration_minutes__gte", 0)),
                name="study_sessions_duration_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("focus_score__isnull", True),
                    models.Q(("focus_score__gte", 0), ("focus_score__lte", 1)),
                    _connector="OR",
                ),
                name="study_sessions_focus_score_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("break_count__gte", 0)),
                name="study_sessions_break_count_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("duration_minutes__lte", 1440)),
                name="study_sessions_duration_reasonable",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("break_count__lte", 50)),
                name="study_sessions_break_count_reasonable",
            ),
        ),
        migrations.AddIndex(
            model_name="studentquestion",
            index=models.Index(
                fields=["user", "created_at"], name="student_que_user_id_f00d3d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studentquestion",
            index=models.Index(
                fields=["question_type", "difficulty_level"],
                name="student_que_questio_42901a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentquestion",
            index=models.Index(
                fields=["is_resolved"], name="student_que_is_reso_001e5a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studentquestion",
            index=models.Index(
                fields=["course_progress", "created_at"],
                name="student_que_course__babb99_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentlearningpattern",
            index=models.Index(
                fields=["last_analyzed"], name="student_lea_last_an_e3ef22_idx"
            ),
        ),
    ]
