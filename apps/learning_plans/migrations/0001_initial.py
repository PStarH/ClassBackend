# Generated by Django 4.2.13 on 2025-07-01 07:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("courses", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StudySession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="唯一标识符",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="更新时间"),
                ),
                ("start_time", models.DateTimeField(verbose_name="开始时间")),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="结束时间"
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="学习时长(分钟)"
                    ),
                ),
                (
                    "content_covered",
                    models.TextField(blank=True, verbose_name="学习内容"),
                ),
                (
                    "effectiveness_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "很差"),
                            (2, "较差"),
                            (3, "一般"),
                            (4, "良好"),
                            (5, "优秀"),
                        ],
                        null=True,
                        verbose_name="学习效果评分(1-5)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="当前是否在进行中"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="学习笔记")),
                (
                    "subject_category",
                    models.CharField(
                        blank=True,
                        help_text="学习内容的主题分类",
                        max_length=50,
                        verbose_name="学习主题",
                    ),
                ),
                (
                    "goal_id",
                    models.UUIDField(blank=True, null=True, verbose_name="学习目标ID"),
                ),
                (
                    "learning_plan_id",
                    models.UUIDField(blank=True, null=True, verbose_name="学习计划ID"),
                ),
                (
                    "break_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="学习过程中的休息次数",
                        verbose_name="休息次数",
                    ),
                ),
                (
                    "focus_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="学习专注度评分(0-1)",
                        max_digits=3,
                        null=True,
                        verbose_name="专注度评分",
                    ),
                ),
                (
                    "learning_environment",
                    models.CharField(
                        choices=[
                            ("home", "家中"),
                            ("library", "图书馆"),
                            ("cafe", "咖啡厅"),
                            ("classroom", "教室"),
                            ("online", "在线"),
                            ("other", "其他"),
                        ],
                        default="other",
                        max_length=50,
                        verbose_name="学习环境",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("mobile", "手机"),
                            ("tablet", "平板"),
                            ("laptop", "笔记本"),
                            ("desktop", "台式机"),
                            ("other", "其他"),
                        ],
                        default="other",
                        max_length=20,
                        verbose_name="学习设备",
                    ),
                ),
                (
                    "course_progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="学习会话关联的课程进度记录",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="study_sessions",
                        to="courses.courseprogress",
                        verbose_name="关联课程进度",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="学习会话所属用户",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="study_sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "学习会话",
                "verbose_name_plural": "学习会话",
                "db_table": "study_sessions",
                "ordering": ["-start_time"],
                "indexes": [
                    models.Index(
                        fields=["user", "start_time"],
                        name="study_sessi_user_id_1acbae_idx",
                    ),
                    models.Index(
                        fields=["user", "is_active"],
                        name="study_sessi_user_id_1378c4_idx",
                    ),
                    models.Index(
                        fields=["is_active", "start_time"],
                        name="study_sessi_is_acti_5f0211_idx",
                    ),
                    models.Index(
                        fields=["goal_id", "start_time"],
                        name="study_sessi_goal_id_5b3287_idx",
                    ),
                    models.Index(
                        fields=["learning_plan_id", "start_time"],
                        name="study_sessi_learnin_0fe729_idx",
                    ),
                    models.Index(
                        fields=["start_time"], name="study_sessi_start_t_e6707c_idx"
                    ),
                    models.Index(
                        fields=["user", "subject_category", "start_time"],
                        name="study_sessi_user_id_bd2ea9_idx",
                    ),
                    models.Index(
                        fields=["course_progress", "start_time"],
                        name="study_sessi_course__b11abf_idx",
                    ),
                    models.Index(
                        fields=["effectiveness_rating", "start_time"],
                        name="study_sessi_effecti_04cf61_idx",
                    ),
                    models.Index(
                        fields=["learning_environment"],
                        name="study_sessi_learnin_485c6e_idx",
                    ),
                    models.Index(
                        fields=["user", "end_time"],
                        name="study_sessi_user_id_d0c388_idx",
                    ),
                    models.Index(
                        fields=["user", "start_time", "end_time"],
                        name="ss_user_time_range_idx",
                    ),
                    models.Index(
                        fields=["user", "effectiveness_rating", "duration_minutes"],
                        name="ss_user_performance_idx",
                    ),
                    models.Index(
                        fields=["learning_environment", "effectiveness_rating"],
                        name="ss_env_performance_idx",
                    ),
                    models.Index(
                        fields=["subject_category", "start_time"],
                        name="ss_subject_time_idx",
                    ),
                    models.Index(
                        fields=["user", "is_active", "start_time"],
                        name="ss_user_active_time_idx",
                    ),
                    models.Index(
                        fields=["user", "created_at"], name="ss_user_created_idx"
                    ),
                    models.Index(
                        fields=["effectiveness_rating", "duration_minutes"],
                        name="ss_rating_duration_idx",
                    ),
                    models.Index(
                        condition=models.Q(("is_active", True)),
                        fields=["user", "start_time"],
                        name="ss_active_user_time_idx",
                    ),
                    models.Index(fields=["start_time"], name="ss_start_time_date_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("end_time__isnull", True),
                    ("end_time__gt", models.F("start_time")),
                    _connector="OR",
                ),
                name="study_sessions_end_time_after_start",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("effectiveness_rating__isnull", True),
                    models.Q(
                        ("effectiveness_rating__gte", 1),
                        ("effectiveness_rating__lte", 5),
                    ),
                    _connector="OR",
                ),
                name="study_sessions_effectiveness_rating_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("duration_minutes__gte", 0)),
                name="study_sessions_duration_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("focus_score__isnull", True),
                    models.Q(("focus_score__gte", 0), ("focus_score__lte", 1)),
                    _connector="OR",
                ),
                name="study_sessions_focus_score_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("break_count__gte", 0)),
                name="study_sessions_break_count_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("duration_minutes__lte", 1440)),
                name="study_sessions_duration_reasonable",
            ),
        ),
        migrations.AddConstraint(
            model_name="studysession",
            constraint=models.CheckConstraint(
                check=models.Q(("break_count__lte", 50)),
                name="study_sessions_break_count_reasonable",
            ),
        ),
    ]
