# Generated by Django 4.2.13 on 2025-07-29 03:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CourseContent",
            fields=[
                (
                    "content_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="内容唯一标识符",
                    ),
                ),
                (
                    "outline",
                    models.JSONField(
                        default=dict,
                        help_text="课程大纲，结构化 JSON 格式",
                        verbose_name="课程大纲",
                    ),
                ),
                (
                    "chapters",
                    models.JSONField(
                        default=list,
                        help_text='每一章的内容，数组格式，如：[{ "title": "Intro", "text": "..." }, ...]',
                        verbose_name="章节内容",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "课程内容",
                "verbose_name_plural": "课程内容",
                "db_table": "course_contents",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="CourseProgress",
            fields=[
                (
                    "course_uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="课程进度ID",
                    ),
                ),
                (
                    "subject_name",
                    models.CharField(
                        help_text="课程所属学科名称",
                        max_length=100,
                        verbose_name="学科名称",
                    ),
                ),
                (
                    "user_experience",
                    models.TextField(
                        blank=True,
                        help_text="用户自我描述的相关经验和背景",
                        verbose_name="用户经验描述",
                    ),
                ),
                (
                    "proficiency_level",
                    models.IntegerField(
                        choices=[
                            (0, "初学者"),
                            (25, "基础"),
                            (50, "中级"),
                            (75, "高级"),
                            (100, "专家"),
                        ],
                        default=0,
                        help_text="用户对该学科的掌握程度（0-100）",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="掌握程度",
                    ),
                ),
                (
                    "learning_hour_week",
                    models.IntegerField(
                        default=0,
                        help_text="最近一周的学习时长（小时）",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="本周学习时长",
                    ),
                ),
                (
                    "learning_hour_total",
                    models.IntegerField(
                        default=0,
                        help_text="总计学习时长（小时）",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="累计学习时长",
                    ),
                ),
                (
                    "est_finish_hour",
                    models.IntegerField(
                        blank=True,
                        help_text="预计完成课程所需时长（小时）",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="预计完成时长",
                    ),
                ),
                (
                    "difficulty",
                    models.IntegerField(
                        choices=[
                            (1, "极易"),
                            (2, "简单"),
                            (3, "容易"),
                            (4, "适中偏易"),
                            (5, "适中"),
                            (6, "适中偏难"),
                            (7, "困难"),
                            (8, "很难"),
                            (9, "极难"),
                            (10, "专家级"),
                        ],
                        help_text="课程难度评分（1-10）",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="课程难度",
                    ),
                ),
                (
                    "feedback",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="用户对课程和内容的反馈信息",
                        verbose_name="用户反馈",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "content_id",
                    models.ForeignKey(
                        db_column="content_id",
                        help_text="关联的课程内容",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_records",
                        to="courses.coursecontent",
                        verbose_name="课程内容",
                    ),
                ),
                (
                    "user_uuid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_progresses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "课程进度",
                "verbose_name_plural": "课程进度",
                "db_table": "course_progress",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddIndex(
            model_name="coursecontent",
            index=models.Index(
                fields=["created_at"], name="course_cont_created_b377a4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="coursecontent",
            index=models.Index(
                fields=["updated_at"], name="course_cont_updated_c1fe0c_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="coursecontent",
            constraint=models.CheckConstraint(
                check=models.Q(("outline__exact", {}), _negated=True),
                name="course_contents_outline_not_empty",
            ),
        ),
        migrations.AddIndex(
            model_name="courseprogress",
            index=models.Index(
                fields=["user_uuid", "updated_at"],
                name="course_prog_user_uu_ce14bb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="courseprogress",
            index=models.Index(
                fields=["subject_name"], name="course_prog_subject_0bc505_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="courseprogress",
            index=models.Index(
                fields=["proficiency_level"], name="course_prog_profici_a4dbbb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="courseprogress",
            index=models.Index(
                fields=["difficulty"], name="course_prog_difficu_d4f64b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="courseprogress",
            index=models.Index(
                fields=["created_at"], name="course_prog_created_d65f99_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="courseprogress",
            index=models.Index(
                fields=["learning_hour_total"], name="course_prog_learnin_6e4512_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="courseprogress",
            constraint=models.CheckConstraint(
                check=models.Q(("learning_hour_week__gte", 0)),
                name="course_progress_weekly_hours_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="courseprogress",
            constraint=models.CheckConstraint(
                check=models.Q(("learning_hour_total__gte", 0)),
                name="course_progress_total_hours_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="courseprogress",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("est_finish_hour__isnull", True),
                    ("est_finish_hour__gt", 0),
                    _connector="OR",
                ),
                name="course_progress_est_finish_hour_positive",
            ),
        ),
        migrations.AddConstraint(
            model_name="courseprogress",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("proficiency_level__gte", 0), ("proficiency_level__lte", 100)
                ),
                name="course_progress_proficiency_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="courseprogress",
            constraint=models.CheckConstraint(
                check=models.Q(("difficulty__gte", 1), ("difficulty__lte", 10)),
                name="course_progress_difficulty_range",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="courseprogress",
            unique_together={("user_uuid", "content_id")},
        ),
    ]
